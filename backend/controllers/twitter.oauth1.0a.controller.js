

import axios from 'axios';
import jwt from 'jsonwebtoken';
import appconf from '../config/config.js'
import OAuth from 'oauth-1.0a';
import crypto from 'crypto';

let request_token;
let oauth_token_secret;

// Initialize OAuth with your consumer key and secret
const oauth = OAuth({
    consumer: {
        key: appconf.TWITTER_API_KEY, // Replace with your Twitter API Key
        secret: appconf.TWITTER_API_KEY_SECRET, // Replace with your Twitter API Secret Key
    },
    signature_method: 'HMAC-SHA1',
    hash_function(baseString, key) {
        return crypto.createHmac('sha1', key).update(baseString).digest('base64');
    },
});


// Walkthrough steps
// https://developer.x.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens
export const getTwitter1AuthorizationUrl = async (req, res) => {
    const request_data = {
        url: 'https://api.x.com/oauth/request_token',
        method: 'POST',
        data: {
            oauth_callback: appconf.TWITTER_1_REDIRECT_URL, // Replace with your callback URL
        },
    };
    try {
        // Step 1: POST oauth/request_token
        // https://developer.x.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens
        const response = await axios.post(request_data.url, null, {
            headers: {
                ...oauth.toHeader(oauth.authorize(request_data)),
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });

        // response.data --> oauth_token=[oauth_token]&oauth_token_secret=[oauth_token_secret]&oauth_callback_confirmed=[true/false]
        const responseParams = new URLSearchParams(response.data);
        request_token = responseParams.get('oauth_token');
        oauth_token_secret = responseParams.get('oauth_token_secret');
        const oauth_token = responseParams.get('oauth_token');


        // Step 2: GET oauth2/authorize
        // https://developer.x.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens
        const authorizationUrl = `https://api.x.com/oauth/authorize?oauth_token=${oauth_token}`;

        res.status(200).send({
            url: `${authorizationUrl}`,
        })
    } catch (error) {
        console.log(error.response)
        throw "Error: get Twitter1 Authorization Url"
    }
}

// https://developer.x.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens
// Step 3: POST oauth/access_token
export const getOauthTokenAndSecret = async (oauth_token, oauth_verifier) => {
    try {
        const request_data = {
            url: "https://api.x.com/oauth/access_token",
            method: 'POST',
            data: {
                oauth_token: oauth_token,         // From the callback
                oauth_verifier: oauth_verifier,   // From the callback
            },
        };

        // Token secret can be passed if needed (from earlier steps in the OAuth flow)
        const token = {
            key: oauth_token,
            secret: oauth_token_secret, // This would be the token secret obtained earlier
        };

        const response = await axios.post(request_data.url, null, {
            headers: {
                // OAuth 1.0a authorization header generated by oauth-1.0a
                ...oauth.toHeader(oauth.authorize(request_data, token)),
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });

        const responseParams = new URLSearchParams(response.data);
        const access_token = responseParams.get('oauth_token');
        const access_token_secret = responseParams.get('oauth_token_secret');

        return {
            access_token,
            access_token_secret
        };
    } catch (error) {
        console.log(error.response)
        throw "Error: GET User AccessToken"
    }
}

// https://developer.x.com/en/docs/x-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials
export const getUserData = async (access_token, access_token_secret) => {
    const url = 'https://api.x.com/1.1/account/verify_credentials.json?include_email=true';
    const method = 'GET';

    // OAuth parameters
    const request_data = {
        url: url,
        method: method,
    };

    // Token from previous steps (access_token and access_token_secret)
    const token = {
        key: access_token,          // Access token obtained after 3-legged OAuth flow
        secret: access_token_secret // Access token secret obtained after 3-legged OAuth flow
    };

    try {
        // Make the GET request to verify credentials
        const response = await axios.get(url, {
            headers: {
                // Add the OAuth Authorization header
                ...oauth.toHeader(oauth.authorize(request_data, token)),
                'Content-Type': 'application/json',
            },
        });

        return response.data;
        /*
            response.data: {
                id: 1591420944593010700,
                id_str: '1591420944593010689',
                name: 'Checked Spot',
                screen_name: 'checked_spot',
                location: '',
                description: 'Farm houses and constructions',
                url: null,
                entities: { description: { urls: [] } },
                protected: false,
                followers_count: 17,
                friends_count: 9,
                listed_count: 0,
                created_at: 'Sat Nov 12 13:21:50 +0000 2022',
                favourites_count: 0,
                utc_offset: null,
                time_zone: null,
                geo_enabled: false,
                verified: false,
                statuses_count: 71,
                lang: null,
                status: {
                    created_at: 'Thu Feb 08 06:27:26 +0000 2024',
                    id: 1755478423848309000,
                    id_str: '1755478423848308905',
                    text: '#checkedspot\n' +
                    'what we do ???\n' +
                    'Follow :@ Checked Spot\n' +
                    'FOR Daily New House &amp; villa Design\n' +
                    'LIKEü©µ\n'  +
                    'SHARE‚û°Ô∏è\n' +
                    'For more detail‚Ä¶ https://t.co/FsomqGO6Ll',
                    truncated: true,
                    entities: {
                    hashtags: [Array],
                    symbols: [],
                    user_mentions: [],
                    urls: [Array]
                    },
                    source: '<a href="https://mobile.twitter.com" rel="nofollow">Twitter Web App</a>',
                    in_reply_to_status_id: null,
                    in_reply_to_status_id_str: null,
                    in_reply_to_user_id: null,
                    in_reply_to_user_id_str: null,
                    in_reply_to_screen_name: null,
                    geo: null,
                    coordinates: null,
                    place: null,
                    contributors: null,
                    is_quote_status: false,
                    retweet_count: 0,
                    favorite_count: 0,
                    favorited: false,
                    retweeted: false,
                    possibly_sensitive: false,
                    lang: 'en'
                },
                contributors_enabled: false,
                is_translator: false,
                is_translation_enabled: false,
                profile_background_color: 'F5F8FA',
                profile_background_image_url: null,
                profile_background_image_url_https: null,
                profile_background_tile: false,
                profile_image_url: 'http://pbs.twimg.com/profile_images/1751946464815616000/VKiJip1V_normal.jpg',
                profile_image_url_https: 'https://pbs.twimg.com/profile_images/1751946464815616000/VKiJip1V_normal.jpg',
                profile_banner_url: 'https://pbs.twimg.com/profile_banners/1591420944593010689/1706534758',
                profile_link_color: '1DA1F2',
                profile_sidebar_border_color: 'C0DEED',
                profile_sidebar_fill_color: 'DDEEF6',
                profile_text_color: '333333',
                profile_use_background_image: true,
                has_extended_profile: true,
                default_profile: true,
                default_profile_image: false,
                following: false,
                follow_request_sent: false,
                notifications: false,
                translator_type: 'none',
                withheld_in_countries: [],
                suspended: false,
                needs_phone_verification: false
                email: 'checkedspot.hsn@gmail.com'
            }
        */
    } catch (error) {
        console.log(error.response)
        throw "Error: GET user DATA"
    }
}

export const twitter1OAuthCallback = async (req, res) => {
    try {
        const oauth_token = req?.query?.oauth_token;
        const oauth_verifier = req?.query?.oauth_verifier;
        // logging the request data
        console.log("1.1. oauth_token : ", oauth_token);
        console.log("1.2. oauth_verifier : ", oauth_verifier);

        if (oauth_token == request_token) {
            // Get the User Access Token by exchanging authorizationCode
            const tokens = await getOauthTokenAndSecret(oauth_token, oauth_verifier);
            console.log("2. user_access_token : ", tokens);

            const userData = await getUserData(tokens.access_token, tokens.access_token_secret);
            console.log("3. userData : ", userData);

            // replace true with some comdition like data save in ds success or not
            if (true) {
                const tokenSignature = {
                    userData: {
                        "email": userData?.email,
                        "name": userData?.name,
                        "picture": userData?.profile_image_url_https,
                        "roles": userData?.roles
                    }
                };

                const token = jwt.sign({ exp: Math.floor(Date.now() / 1000) + (60 * 60 * 24), ...tokenSignature }, 'privetKey', { algorithm: 'HS256' });

                res.cookie("token", `Bearer ${token}`, {
                    maxAge: (3600000 * 24),
                    httpOnly: false,
                    //here domain, which can access this cookie like localhost, www.checkedspot.com
                    //specify .checkedspot.com, isetn this case all the subdomains can also access this cookie like blog.checkedspot.com, checkedspot.com
                    domain: process.env.DOMAIN,
                    path: "/",
                    secure: true,
                    sameSite: "Lax",
                })
                res.redirect(process.env.REDIRECT_TO_UI);
            } else {
                res.redirect(process.env.ERROR_REDIRECT_TO_UI)
            }
        }
    } catch (error) {
        console.log(error)
    }
}
